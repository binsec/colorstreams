diff --git a/mjs.c b/mjs.c
index f314ecd..8df75ca 100644
--- a/mjs.c
+++ b/mjs_.c
@@ -3960,17 +3960,18 @@ char *cs_mmap_file(const char *path, size_t *size) {
 /* Amalgamated: #include "cs_varint.h" */
 
 size_t cs_varint_llen(uint64_t num) {
-  size_t llen = 0;
+  /*size_t llen = 0;
 
   do {
     llen++;
   } while (num >>= 7);
 
-  return llen;
+  return llen;*/
+    return 8;
 }
 
 size_t cs_varint_encode(uint64_t num, uint8_t *buf, size_t buf_size) {
-  size_t llen = 0;
+  /*size_t llen = 0;
 
   do {
     uint8_t byte = num & 0x7f;
@@ -3980,25 +3981,28 @@ size_t cs_varint_encode(uint64_t num, uint8_t *buf, size_t buf_size) {
     llen++;
   } while (num != 0);
 
-  return llen;
+  return llen;*/
+    *((uint64_t *) buf) = num;
+    buf += 8;
+    return 8;
 }
 
 bool cs_varint_decode(const uint8_t *buf, size_t buf_size, uint64_t *num,
                       size_t *llen) {
-  size_t i = 0, shift = 0;
+  /*size_t i = 0, shift = 0;
   uint64_t n = 0;
 
   do {
     if (i == buf_size || i == (8 * sizeof(*num) / 7 + 1)) return false;
-    /*
+    *
      * Each byte of varint contains 7 bits, in little endian order.
      * MSB is a continuation bit: it tells whether next byte is used.
-     */
+     *
     n |= ((uint64_t)(buf[i] & 0x7f)) << shift;
-    /*
+    *
      * First we increment i, then check whether it is within boundary and
      * whether decoded byte had continuation bit set.
-     */
+     *
     i++;
     shift += 7;
   } while (shift < sizeof(uint64_t) * 8 && (buf[i - 1] & 0x80));
@@ -4006,7 +4010,10 @@ bool cs_varint_decode(const uint8_t *buf, size_t buf_size, uint64_t *num,
   *num = n;
   *llen = i;
 
-  return true;
+  return true;*/
+    *num = *((uint64_t *) buf);
+    *llen = 8;
+    return true;
 }
 
 uint64_t cs_varint_decode_unsafe(const uint8_t *buf, int *llen) {
